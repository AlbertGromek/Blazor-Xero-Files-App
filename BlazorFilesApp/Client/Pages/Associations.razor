@page "/associations"
@using BlazorFilesApp.Shared
@using Xero.NetStandard.OAuth2.Model.Files
@using Xero.NetStandard.OAuth2.Model.Accounting
@using System.Text.Json
@using System.Text
@using System.IO
@using System.Linq
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@using System.Web
@using System.ComponentModel.DataAnnotations;

@inject ILogger<Files> logger
@inject HttpClient Http
@inject IJSRuntime JsRuntime
<h3>Associations</h3>


@if (files == null || invoices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2> Create Association </h2>
    <p>
        Choose the invoice to associate your file with:
    </p>

    <select @bind="invoiceID">
        <option>--select--</option>
        @foreach (var invoice in invoices)
        {
            <option value="@invoice.InvoiceID">@invoice.InvoiceID</option>
        }
    </select>

    <p>
        Choose the file to associate:
    </p>

    <select @bind="fileId">
        <option>--select--</option>
        @foreach (var file in files)
        {
            <option value="@file.Id">@file.Name @file.Id</option>
        }
    </select>

    <button @onclick="CreateAssociation">Create Association</button>



    <h2> Get Associations for a File </h2>
    <p>
        Enter a valid fileId to get Associations for that File. <br/> There is a list of files and fileIds below you can copy and paste from.
    </p>

    <input @bind="albertId" />
    <button @onclick="HandleValidSubmit">Get Associations By FileId</button>
}

<table class="table">
    <thead>
        <tr>
            <th>ObjectGroup</th>
            <th>ObjectType</th>
            <th>ObjectId</th>
            <th>FileId</th>
            <th></th>
        </tr>
    </thead>

    @if (associations != null)
    {
        <tbody>
            @foreach (var association in associations)
            {
                <tr>
                    <td>@association.ObjectGroup</td>
                    <td>@association.ObjectType</td>
                    <td>@association.ObjectId</td>
                    <td>@association.FileId</td>
                    <td><button @onclick="() => Delete(association)">Delete</button></td>
                </tr>
            }
        </tbody>
    }

</table>

<h3>List of Files</h3>


@if (files == null)
{
    <p><em>Loading Files...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Id</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private async Task HandleValidSubmit()
    {
        try
        {
            associations = await Http.GetFromJsonAsync<List<Association>>(string.Format("getassociations/?id={0}", albertId));
        }
        catch (Xero.NetStandard.OAuth2.Client.ApiException e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private Invoice invoice;
    private List<Invoice> invoices;
    private List<FileObject> files;
    public List<Association> associations;
    public Guid invoiceID;
    public Guid fileId;
    public Guid selectedFileId;
    private Guid SelectedFileId
    {
        get
        {
            return selectedFileId;
        }
        set
        {
            ChangeEventArgs selectedEventArgs = new ChangeEventArgs();
            selectedEventArgs.Value = value;
            selectedFileId = value;
            OnAssociationChange(selectedEventArgs);

        }
    }

    public string albertId { get; set; }


    private async Task OnAssociationChange(ChangeEventArgs e)
    {
        associations = await Http.GetFromJsonAsync<List<Association>>(string.Format("getassociations/?id={0}", e.Value));
    }


    private FolderValidation exampleFolder = new FolderValidation();
    public class FolderValidation
    {
        [Required]
        public string Name { get; set; }
    }

    private async Task CreateAssociation()
    {
        invoice = invoices.Where(x => x.InvoiceID == invoiceID).FirstOrDefault();
        var objectType = (ObjectType)Enum.Parse(typeof(ObjectType), invoice.Type.ToString(), true);

        var association = new Association
        {
            ObjectGroup = ObjectGroup.Invoice,
            ObjectType = objectType,
            FileId = fileId,
            ObjectId = invoice.InvoiceID
        };
        await Http.PostAsJsonAsync<Association>("createassociation", association);
        if (fileId == SelectedFileId) { associations.Add(association); }
    }

    private class File
    {
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        files = await Http.GetFromJsonAsync<List<FileObject>>("getfiles");
        var invoicelist = await Http.GetFromJsonAsync<Invoices>("getinvoices");
        invoices = invoicelist._Invoices;
        selectedFileId = files.FirstOrDefault().Id ?? Guid.Empty;

    }

    async Task Delete(Association association)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the association?");
        if (confirmed)
        {
            Console.WriteLine("Deleting" + association);
            await Http.PostAsJsonAsync<Association>("deleteassociation", association);
            await OnInitializedAsync();
        }
    }
}
