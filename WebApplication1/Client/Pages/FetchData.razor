@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WebApplication1.Shared
@using System.Net.Http.Headers

@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigator

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string responseBody;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var accessTokenResult = await TokenProvider.RequestAccessToken();
            var AccessToken = string.Empty;
            if (accessTokenResult.TryGetToken(out var token))
            {
                AccessToken = token.Value;
            }
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Navigator.BaseUri + "/WeatherForecast")
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
            var response = await Http.SendAsync(requestMessage);
            responseBody = await response.Content.ReadAsStringAsync();
            forecasts = System.Text.Json.JsonSerializer.Deserialize<WeatherForecast[]>(responseBody);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
