@page "/files"
@using WebApplication1.Shared
@using Xero.NetStandard.OAuth2.Model.Files
@using System.Text.Json
@using System.Text
@using System.IO
@using System.Linq
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@using System.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject ILogger<Files> logger
@inject HttpClient Http
@inject IJSRuntime JsRuntime
<h3>Files</h3>


@if (filesItems == null)
{
    <p><em>Loading Files...</em></p>
}
else
{
    @*<img src="data:image;base64,@System.Convert.ToBase64String(image)" width="200" height="200" />*@

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th>MimeType</th>
                <th>Size</th>
                <th>Delete</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in filesItems)
            {
            <tr>
                <td>@file.Name</td>
                <td>@file.Id</td>
                <td>@file.MimeType</td>
                <td>@file.Size</td>
                <td><button @onclick="() => Delete(file)">Delete</button></td>
            </tr>
            }
        </tbody>
    </table>
}

<h2> Upload File </h2>
<p>
    Select a Folder from the dropdown to upload to it. Otherwise it will be uploaded to the Inbox folder.
</p>

@if (folders == null)
{
    <p><em>Loading Folders...</em></p>
}
else
{
    <select @bind="folderId">
        <option>--select--</option>
        @foreach (var item in folders)
        {
            <option value="@item.Id">@item.Name</option>
        }
    </select>
}

<p>
    <label>
        <InputFile OnChange="@SingleUpload" />
    </label>
</p>


@code {

    private class File
    {
        public string Name { get; set; }
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        XeroUpload file = new XeroUpload
        {
            FileName = e.File.Name,
            FileContent = bytes,
            Size = e.File.Size,
            ContentType = e.File.ContentType,
            FolderId = folderId ?? null
        };

        await Http.PostAsJsonAsync<XeroUpload>("uploadfile", file);
        filesItems = await Http.GetFromJsonAsync<List<FileObject>>("getfiles");
    }

    async Task Delete(FileObject file)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", String.Format("Are you sure you want to delete the '{0}' file?\nFile Id= {1}\n", file.Name, file.Id));
        if (confirmed)
        {
            filesItems = filesItems.Where(x => x.Id != file.Id).ToList();
            Console.WriteLine("Deleting" + file.Id);
            await Http.PostAsJsonAsync<FileObject>("deletefile", file);
        }
    }


    private List<FileObject> filesItems;
    private List<Folder> folders;
    private byte[] image;
    private Guid? folderId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            filesItems = await Http.GetFromJsonAsync<List<FileObject>>("getfiles");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        folders = await Http.GetFromJsonAsync<List<Folder>>("getfolders");
        image = await Http.GetFromJsonAsync<byte[]>(string.Format("getfile/?id={0}", filesItems.FirstOrDefault().Id));
    }
}
