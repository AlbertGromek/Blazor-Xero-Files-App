@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using System.Net.Http.Headers;
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider



@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IJSRuntime JSRuntime


<AuthorizeView>
    <Authorized>
        <a href="authentication/profile">Hello, @context.User.Identity.scope!</a>
        @*<a href="authentication/profile">Hello, @given_name! Organisation: @orgName</a>*@
        <button class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/register">Register</a>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
   
        }
        else
        {
        }
        //string key = "Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings";
        //string authSettingsRAW = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", key);
        //authSettings = JsonSerializer.Deserialize<CachedAuthSettings>(authSettingsRAW);
        //string userRAW = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", authSettings?.OIDCUserKey);
        //user = JsonSerializer.Deserialize<XeroUser>(userRAW);
        //var accessToken = user.access_token;
        //using (HttpClient client = new HttpClient())
        //{
        //    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        //    List<Connection> connections = await client.GetFromJsonAsync<List<Connection>>("https://api.xero.com/connections");
        //    orgName = connections.FirstOrDefault().tenantName;
        //}
    }

    JsonSerializerOptions indented = new JsonSerializerOptions() { WriteIndented = true };
    CachedAuthSettings authSettings;
    XeroUser user;
    private string orgName { get; set; } = "";

    public string given_name { get; set; }
    public string family_name { get; set; }
    public string name { get; set; }
    public string email { get; set; }

    public class CachedAuthSettings
    {
        public string authority { get; set; }
        public string metadataUrl { get; set; }
        public string client_id { get; set; }
        public string[] defaultScopes { get; set; }
        public string redirect_uri { get; set; }
        public string post_logout_redirect_uri { get; set; }
        public string response_type { get; set; }
        public string response_mode { get; set; }
        public string scope { get; set; }

        public string OIDCUserKey => $"oidc.user:{authority}:{client_id}";
    }

    public class XeroUser
    {
        public string id_token { get; set; }
        public string access_token { get; set; }
        public string refresh_token { get; set; }
        public string token_type { get; set; }
        public string scope { get; set; }
        public int expires_at { get; set; }
        public Profile profile { get; set; }
    }
    public class Profile
    {
        public string given_name { get; set; }
        public string family_name { get; set; }
        public string preferred_username { get; set; }
        public string email { get; set; }
        public string sid { get; set; }
        public string sub { get; set; }
        public string xero_userid { get; set; }
        public string global_session_id { get; set; }
    }
}
